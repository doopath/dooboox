{"ast":null,"code":"var t,\n    n,\n    e = function e() {\n  return \"\".concat(Date.now(), \"-\").concat(Math.floor(8999999999999 * Math.random()) + 1e12);\n},\n    i = function i(t) {\n  var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;\n  return {\n    name: t,\n    value: n,\n    delta: 0,\n    entries: [],\n    id: e(),\n    isFinal: !1\n  };\n},\n    a = function a(t, n) {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(t)) {\n      var e = new PerformanceObserver(function (t) {\n        return t.getEntries().map(n);\n      });\n      return e.observe({\n        type: t,\n        buffered: !0\n      }), e;\n    }\n  } catch (t) {}\n},\n    r = !1,\n    o = !1,\n    s = function s(t) {\n  r = !t.persisted;\n},\n    u = function u() {\n  addEventListener(\"pagehide\", s), addEventListener(\"beforeunload\", function () {});\n},\n    c = function c(t) {\n  var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n  o || (u(), o = !0), addEventListener(\"visibilitychange\", function (n) {\n    var e = n.timeStamp;\n    \"hidden\" === document.visibilityState && t({\n      timeStamp: e,\n      isUnloading: r\n    });\n  }, {\n    capture: !0,\n    once: n\n  });\n},\n    l = function l(t, n, e, i) {\n  var a;\n  return function () {\n    e && n.isFinal && e.disconnect(), n.value >= 0 && (i || n.isFinal || \"hidden\" === document.visibilityState) && (n.delta = n.value - (a || 0), (n.delta || n.isFinal || void 0 === a) && (t(n), a = n.value));\n  };\n},\n    p = function p(t) {\n  var n,\n      e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n      r = i(\"CLS\", 0),\n      o = function o(t) {\n    t.hadRecentInput || (r.value += t.value, r.entries.push(t), n());\n  },\n      s = a(\"layout-shift\", o);\n\n  s && (n = l(t, r, s, e), c(function (t) {\n    var e = t.isUnloading;\n    s.takeRecords().map(o), e && (r.isFinal = !0), n();\n  }));\n},\n    d = function d() {\n  return void 0 === t && (t = \"hidden\" === document.visibilityState ? 0 : 1 / 0, c(function (n) {\n    var e = n.timeStamp;\n    return t = e;\n  }, !0)), {\n    get timeStamp() {\n      return t;\n    }\n\n  };\n},\n    v = function v(t) {\n  var n,\n      e = i(\"FCP\"),\n      r = d(),\n      o = a(\"paint\", function (t) {\n    \"first-contentful-paint\" === t.name && t.startTime < r.timeStamp && (e.value = t.startTime, e.isFinal = !0, e.entries.push(t), n());\n  });\n  o && (n = l(t, e, o));\n},\n    f = function f(t) {\n  var n = i(\"FID\"),\n      e = d(),\n      r = function r(t) {\n    t.startTime < e.timeStamp && (n.value = t.processingStart - t.startTime, n.entries.push(t), n.isFinal = !0, s());\n  },\n      o = a(\"first-input\", r),\n      s = l(t, n, o);\n\n  o ? c(function () {\n    o.takeRecords().map(r), o.disconnect();\n  }, !0) : window.perfMetrics && window.perfMetrics.onFirstInputDelay && window.perfMetrics.onFirstInputDelay(function (t, i) {\n    i.timeStamp < e.timeStamp && (n.value = t, n.isFinal = !0, n.entries = [{\n      entryType: \"first-input\",\n      name: i.type,\n      target: i.target,\n      cancelable: i.cancelable,\n      startTime: i.timeStamp,\n      processingStart: i.timeStamp + t\n    }], s());\n  });\n},\n    m = function m() {\n  return n || (n = new Promise(function (t) {\n    return [\"scroll\", \"keydown\", \"pointerdown\"].map(function (n) {\n      addEventListener(n, t, {\n        once: !0,\n        passive: !0,\n        capture: !0\n      });\n    });\n  })), n;\n},\n    g = function g(t) {\n  var n,\n      e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n      r = i(\"LCP\"),\n      o = d(),\n      s = function s(t) {\n    var e = t.startTime;\n    e < o.timeStamp ? (r.value = e, r.entries.push(t)) : r.isFinal = !0, n();\n  },\n      u = a(\"largest-contentful-paint\", s);\n\n  if (u) {\n    n = l(t, r, u, e);\n\n    var p = function p() {\n      r.isFinal || (u.takeRecords().map(s), r.isFinal = !0, n());\n    };\n\n    m().then(p), c(p, !0);\n  }\n},\n    h = function h(t) {\n  var n,\n      e = i(\"TTFB\");\n  n = function n() {\n    try {\n      var n = performance.getEntriesByType(\"navigation\")[0] || function () {\n        var t = performance.timing,\n            n = {\n          entryType: \"navigation\",\n          startTime: 0\n        };\n\n        for (var e in t) {\n          \"navigationStart\" !== e && \"toJSON\" !== e && (n[e] = Math.max(t[e] - t.navigationStart, 0));\n        }\n\n        return n;\n      }();\n\n      e.value = e.delta = n.responseStart, e.entries = [n], e.isFinal = !0, t(e);\n    } catch (t) {}\n  }, \"complete\" === document.readyState ? setTimeout(n, 0) : addEventListener(\"pageshow\", n);\n};\n\nexport { p as getCLS, v as getFCP, f as getFID, g as getLCP, h as getTTFB };","map":null,"metadata":{},"sourceType":"module"}