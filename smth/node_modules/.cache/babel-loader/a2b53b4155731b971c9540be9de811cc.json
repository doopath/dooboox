{"ast":null,"code":"import _classCallCheck from \"/home/doopath/Files/coderpool/React/dooboox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nexport var Searcher = function Searcher(_string, elements) {\n  var _this = this;\n\n  _classCallCheck(this, Searcher);\n\n  this.result = void 0;\n  this.searchString = void 0;\n  this.elementsList = void 0;\n\n  this.fastSearch = function () {\n    _this.elementsList.map(function (els) {\n      els.forEach(function (e) {\n        if (_this.searchString != \"\") {\n          e.innerHTML = _this.markRemove(e.innerHTML).replace(new RegExp(_this.searchString, \"gi\"), _this.mark(_this.searchString));\n        } else {\n          e.innerHTML = _this.markRemove(e.innerHTML);\n        }\n      });\n    });\n  };\n\n  this.search = function (type) {\n    if (!type) {\n      _this.elementsList.map(function (els) {\n        els.forEach(function (e) {\n          if (_this.searchString !== \"\") {\n            e.innerHTML = _this.parse(_this.searchString, e.innerText);\n          } else {\n            e.innerHTML = _this.markRemove(e.innerText);\n          }\n        });\n      });\n    } else _this.fastSearch(); // ( fast search replaces any typecases sumbols to lowercase but it's faster )\n\n  };\n\n  this.parse = function (token, string) {\n    var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n    if (result === \"\") {\n      var foundToken = string.match(new RegExp(token, \"i\"));\n      var _result = string;\n\n      if (foundToken !== null) {\n        var offString = string.substring(Number(foundToken.index) + token.length);\n        _result = _result.substring(0, foundToken.index) + _this.mark(foundToken[0]) + offString;\n\n        _this.parse(token, offString, _result);\n      } else {\n        return _result;\n      }\n    } else {\n      var _foundToken = string.match(new RegExp(token, \"i\"));\n\n      if (_foundToken !== null) {\n        var _offString = string.replace(_foundToken[0], _this.mark(_foundToken[0]));\n\n        result = result.replace(string, _offString);\n        _offString = _offString.substring(Number(_foundToken.index) + _this.mark(_foundToken[0]).length); // recall itselft ( Yamete kudasai )\n\n        _this.parse(token, _offString, result);\n      } else {\n        _this.result = result;\n      }\n    }\n\n    return _this.result;\n  };\n\n  this.mark = function (token) {\n    return \"<mark>\".concat(token, \"</mark>\");\n  };\n\n  this.markRemove = function (htmlItem) {\n    return htmlItem // Remove any markers\n    .replace(new RegExp(\"<mark>\", \"g\"), \"\").replace(new RegExp(\"</mark>\", \"g\"), \"\");\n  };\n\n  this.removeSpecialSymbols = function (string) {\n    // Here i gonna remove any stuff like shitsymbols else it throw an error ;)\n    return string.replace(/[?/\\\\!@$%&*+^\\[\\]|()]/g, \"\");\n  };\n\n  this.searchString = this.removeSpecialSymbols(_string.toLowerCase().trim());\n  this.result = \"\"; // Uses for return this in parse method\n\n  this.elementsList = elements.map(function (e) {\n    return document.querySelectorAll(e);\n  });\n};","map":{"version":3,"sources":["/home/doopath/Files/coderpool/React/dooboox/src/components/modules/ContentSearch.ts"],"names":["Searcher","string","elements","result","searchString","elementsList","fastSearch","map","els","forEach","e","innerHTML","markRemove","replace","RegExp","mark","search","type","parse","innerText","token","foundToken","match","offString","substring","Number","index","length","htmlItem","removeSpecialSymbols","toLowerCase","trim","document","querySelectorAll"],"mappings":"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","sourcesContent":["export class Searcher {\n  private result: string;\n  private searchString: string;\n  private elementsList: Array<NodeList>;\n\n  public constructor(string: string, elements: Array<string>) {\n    this.searchString = this.removeSpecialSymbols(string.toLowerCase().trim());\n    this.result = \"\"; // Uses for return this in parse method\n\n    this.elementsList = elements.map(\n      (e: string): NodeList => {\n        return document.querySelectorAll(e);\n      }\n    );\n  }\n\n  private fastSearch = (): void => {\n    this.elementsList.map((els: NodeList) => {\n      els.forEach((e: any) => {\n        if (this.searchString != \"\") {\n          e.innerHTML = this.markRemove(e.innerHTML).replace(\n            new RegExp(this.searchString, \"gi\"),\n            this.mark(this.searchString)\n          );\n        } else {\n          e.innerHTML = this.markRemove(e.innerHTML);\n        }\n      });\n    });\n  };\n\n  public search = (type: boolean): void => {\n    if (!type) {\n      this.elementsList.map((els: NodeList) => {\n        els.forEach((e: any) => {\n          if (this.searchString !== \"\") {\n            e.innerHTML = this.parse(this.searchString, e.innerText);\n          } else {\n            e.innerHTML = this.markRemove(e.innerText);\n          }\n        });\n      });\n    } else this.fastSearch();\n    // ( fast search replaces any typecases sumbols to lowercase but it's faster )\n  };\n\n  private parse = (\n    token: string,\n    string: string,\n    result: string = \"\"\n  ): string => {\n    if (result === \"\") {\n      let foundToken: RegExpMatchArray | null = string.match(\n        new RegExp(token, \"i\")\n      );\n      let result = string;\n\n      if (foundToken !== null) {\n        let offString = string.substring(\n          Number(foundToken.index) + token.length\n        );\n\n        result =\n          result.substring(0, foundToken.index) +\n          this.mark(foundToken[0]) +\n          offString;\n\n        this.parse(token, offString, result);\n      } else {\n        return result;\n      }\n    } else {\n      let foundToken: RegExpMatchArray | null = string.match(\n        new RegExp(token, \"i\")\n      );\n\n      if (foundToken !== null) {\n        let offString: string = string.replace(\n          foundToken[0],\n          this.mark(foundToken[0])\n        );\n\n        result = result.replace(string, offString);\n\n        offString = offString.substring(\n          Number(foundToken.index) + this.mark(foundToken[0]).length\n        );\n\n        // recall itselft ( Yamete kudasai )\n        this.parse(token, offString, result);\n      } else {\n        this.result = result;\n      }\n    }\n\n    return this.result;\n  };\n\n  private mark = (token: string): string => {\n    return `<mark>${token}</mark>`;\n  };\n\n  private markRemove = (htmlItem: string): string => {\n    return htmlItem // Remove any markers\n      .replace(new RegExp(\"<mark>\", \"g\"), \"\")\n      .replace(new RegExp(\"</mark>\", \"g\"), \"\");\n  };\n\n  private removeSpecialSymbols = (string: string): string => {\n    // Here i gonna remove any stuff like shitsymbols else it throw an error ;)\n    return string.replace(/[?/\\\\!@$%&*+^\\[\\]|()]/g, \"\");\n  };\n}\n"]},"metadata":{},"sourceType":"module"}